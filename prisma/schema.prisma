// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  EXPERT
}

enum Category {
  GENERAL
  TECHNOLOGY
  HEALTH
  EDUCATION
  OTHER
}

enum ChatStatus {
  ACTIVE
  RESOLVED
}

enum ExpertSpecialty {
  CHILD_NUTRITION
  CHILD_PSYCHOLOGY
  PARENTING
  CHILD_DEVELOPMENT
  CHILD_EDUCATION
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Expert specific fields
  specialty    ExpertSpecialty?
  about        String?
  rating       Float?           @default(0)
  totalReviews Int?             @default(0)
  totalRatings Int?             @default(0)
  profileImage String?

  // Chat relations
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  chatRooms        ChatRoom[] @relation("UserChatRooms")
  expertChatRooms  ChatRoom[] @relation("ExpertChatRooms")
  reviews          Review[]   @relation("UserReviews")
  receivedReviews  Review[]   @relation("ExpertReviews")

  // blog relations
  posts    Post[]    @relation("PostAuthor")
  comments Comment[] @relation("CommentAuthor")

  // Forum relations
  threads       Thread[]       @relation("ThreadAuthor")
  forumComments ForumComment[] @relation("ForumCommentAuthor")
  forumLikes    ForumLike[]
}

// Chat model
model ChatRoom {
  id        Int        @id @default(autoincrement())
  user      User       @relation("UserChatRooms", fields: [userId], references: [id])
  userId    Int
  expert    User       @relation("ExpertChatRooms", fields: [expertId], references: [id])
  expertId  Int
  status    ChatStatus @default(ACTIVE)
  messages  Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  review    Review?
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String?  @db.Text
  user       User     @relation("UserReviews", fields: [userId], references: [id])
  userId     Int
  expert     User     @relation("ExpertReviews", fields: [expertId], references: [id])
  expertId   Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int      @unique
  createdAt  DateTime @default(now())
}

// News model
model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String    @db.Text
  image     String?
  author    User      @relation("PostAuthor", fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  author    User     @relation("CommentAuthor", fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Forum models
model Thread {
  id        Int            @id @default(autoincrement())
  title     String
  content   String         @db.Text
  category  Category       @default(GENERAL)
  author    User           @relation("ThreadAuthor", fields: [authorId], references: [id])
  authorId  Int
  comments  ForumComment[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ForumComment {
  id        Int         @id @default(autoincrement())
  content   String      @db.Text
  author    User        @relation("ForumCommentAuthor", fields: [authorId], references: [id])
  authorId  Int
  thread    Thread      @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  Int
  likes     ForumLike[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model ForumLike {
  id        Int          @id @default(autoincrement())
  type      String // "LIKE" or "DISLIKE"
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  comment   ForumComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  createdAt DateTime     @default(now())

  @@unique([userId, commentId])
}
